<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--spring配置文件-->

    <context:component-scan base-package="com.yt.furn">
        <!--因为在springMVC中配置过了，所以这里就去除掉Controller-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--配置数据源-->
    <!--引入jdbc.properties配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--配置数据源对象-->
    <bean class="com.alibaba.druid.pool.DruidDataSource" id="pooledDataSource">
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.pwd}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
    </bean>

    <!--配置mybatis和spring的整合-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <!--指定mybatis的全局配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--指定数据源-->
        <property name="dataSource" ref="pooledDataSource"/>
        <!--只当mybatis的mapper文件的位置, 会将这些文件放在一起 resource/mapper 下-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!--配置扫描器，将mybatis接口的实现加入到ioc容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--
             1. 扫描所有的dao接口的实现，加入到ioc容器中
             2. 这里的dao接口就是mapper接口
        -->
        <property name="basePackage" value="com.yt.furn.dao"/>
    </bean>

    <!--配置事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="pooledDataSource"/>
    </bean>

    <!--&lt;!&ndash;配置启动基于事务的声明式管理功能&ndash;&gt;-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->
    <!--配置开启注解的事务（使用xml配置+切入表达式），并指定切入点-->
    <aop:config>
        <!--切入点表达式：com.yt.furn.service 表示这个包下面的所有方法都是事务方法-->
        <aop:pointcut id="txPoint" expression="execution(* com.yt.furn.service..*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>

    <!--配置事务增强[指定事务规则]，也就是指定事务如何切入-->
    <tx:advice id="txAdvice">
        <tx:attributes>
            <!--* 表示所有的方法都是事务方法， 就不用注解了-->
            <tx:method name="*"/>
            <!--以get开始的所有方法，认为是只读，进行调优-->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
</beans>
